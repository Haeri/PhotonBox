name: CPP Releaser

on:
  push:
    tags:
      - v*

jobs:
  build-win:
    name: Windows Build
    runs-on: windows-latest
    steps:
      - name: Download Repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Setup Environment
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Generate Solution
        run: ./scripts/generate_project_win.bat -s
      - name: Build
        run: 'MSBuild.exe ./build/PhotonBox.sln /p:Configuration=Release'
      - name: Test
        run: ./scripts/code_checker_win.bat -s
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'PhotonBox-${{ runner.os }}'
          path: ./build/Release/PhotonBox.lib
  
  build-linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - name: Download Repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Setup Environment
        run: |
          sudo chmod +x ./scripts/*.sh
          sudo apt-get update
          sudo apt-get install mesa-common-dev libglu1-mesa-dev xorg-dev
      - name: Generate Solution
        run: ./scripts/generate_project_linux.sh
      - name: Build
        run: |
          cd ./build
          sudo make config=Release
      - name: Test
        run: ./scripts/code_checker_linux.sh -s
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'PhotonBox-${{ runner.os }}'
          path: ./build/libPhotonBox.a
  
  build-mac:
    name: Mac Build
    runs-on: macos-latest
    steps:
      - name: Download Repository
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Setup Environment
        run: |
          sudo chmod +x ./scripts/*.sh
      - name: Generate Solution
        run: ./scripts/generate_project_mac.sh
      - name: Build
        run: |
          cd ./build
          sudo make config=Release
      - name: Test
        run: ./scripts/code_checker_mac.sh -s
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'PhotonBox-${{ runner.os }}'
          path: ./build/libPhotonBox.a


  release:
    name: Make Release
    runs-on: ubuntu-latest
    needs:
      - build-win
      - build-linux
      - build-mac
    steps:
      - name: Get Version
        id: get_version
        run: 'echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}'
      - name: Download Windows Artifact
        uses: actions/download-artifact@v1
        with:
          name: 'PhotonBox-${GITHUB_REF/refs\/tags\//}-Windows'
          path: release/Windows
      - name: Download Linux Artifact
        uses: actions/download-artifact@v1
        with:
          name: 'PhotonBox-${GITHUB_REF/refs\/tags\//}-Linux'
          path: release/Linux
      - name: Zip Archives
        run: |
          cd release/Windows
          zip -r ../Windows.zip .
          cd ../Linux
          zip -r ../Linux.zip .
          cd ../..        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'PhotonBox Release ${{ steps.get_version.outputs.VERSION }}'
          draft: false
          prerelease: 'endsWith(steps.get_version.outputs.VERSION, ''.0'') != true'
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./release/Windows.zip
          asset_name: 'PhotonBox-${{ steps.get_version.outputs.VERSION }}-Windows.zip'
          asset_content_type: application/zip
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./release/Linux.zip
          asset_name: 'PhotonBox-${{ steps.get_version.outputs.VERSION }}-Linux.zip'
          asset_content_type: application/zip
